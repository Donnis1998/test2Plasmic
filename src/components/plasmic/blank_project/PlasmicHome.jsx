// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: v5kPWVs52pwRXwqqMcp9wM
// Component: DbNFw3I6kWzV
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { BsButton } from "../../customs/BSButton"; // plasmic-import: bdU_Gcq0jC/codeComponent
import { BsDropdown } from "../../customs/BSDropdown"; // plasmic-import: w-_U8VX1RB/codeComponent
import { GridControl } from "../../customs/BSGridControl"; // plasmic-import: hbSSI2e9VW/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: v5kPWVs52pwRXwqqMcp9wM/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: DbNFw3I6kWzV/css

export const PlasmicHome__VariantProps = new Array();

export const PlasmicHome__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHome__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <p.Stack
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Alberto Torres "}
            </h1>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "If you haven't already done so, go back and learn the basics by going through the Plasmic Levels tutorial.\n\nIt's always easier to start from examples! Add a new page using a template—do this from the list of pages in the top left (the gray + button).\n\nOr press the big blue + button to start dragging items into this page.\n\nIntegrate this project into your codebase—press the "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Code"}
                </span>
                <React.Fragment>
                  {
                    " button in the top right and follow the quickstart instructions.\n\nJoin our Slack community (icon in bottom left) for help any time."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
          </p.Stack>
          <BsButton
            data-plasmic-name={"bsButton"}
            data-plasmic-override={overrides.bsButton}
            className={classNames("__wab_instance", sty.bsButton)}
            color={"info"}
            content={"Continuar"}
          />

          <BsDropdown
            data-plasmic-name={"bsDropdown"}
            data-plasmic-override={overrides.bsDropdown}
            bsInput={true}
            className={classNames("__wab_instance", sty.bsDropdown)}
            color={"success"}
            dataSource={[
              { id: "USA", label: "United States of America" },
              { id: "EC", label: "Ecuador" },
              { id: "ES", label: "España" }
            ]}
            fields={{ text: "label", value: "id" }}
            width={200}
          />

          <GridControl
            data-plasmic-name={"gridControl"}
            data-plasmic-override={overrides.gridControl}
            allowPaging={true}
            className={classNames("__wab_instance", sty.gridControl)}
            dataSource={[
              {
                ProductID: 10250,
                ProductName: "Sandia",
                QuantityPerUnit: 12,
                PurchaseDate: "2022-07-1",
                UnitPrice: 30.5,
                UnitsInStock: 20
              },
              {
                ProductID: 10251,
                ProductName: "Manzana",
                QuantityPerUnit: 20,
                PurchaseDate: "2022-07-2",
                UnitPrice: 15.5,
                UnitsInStock: 25
              }
            ]}
            enableFrozenCommand={true}
            gridData={{
              columns: [
                { field: "ProductID", width: 250 },
                { field: "ProductName", width: 250 },
                { field: "QuantityPerUnit", width: 250 },
                { field: "PurchaseDate", width: 250 },
                { field: "UnitPrice", width: 250 },
                { field: "UnitsInStock", width: 250 }
              ]
            }}
            height={300}
            width={600}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "h1",
    "text",
    "bsButton",
    "bsDropdown",
    "gridControl"
  ],

  section: ["section", "h1", "text"],
  h1: ["h1"],
  text: ["text"],
  bsButton: ["bsButton"],
  bsDropdown: ["bsDropdown"],
  gridControl: ["gridControl"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    bsButton: makeNodeComponent("bsButton"),
    bsDropdown: makeNodeComponent("bsDropdown"),
    gridControl: makeNodeComponent("gridControl"),
    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
